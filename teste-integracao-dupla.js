/**
 * TESTE DA INTEGRA√á√ÉO DUPLA: PipeRun + ActiveCampaign
 * Execute este c√≥digo no console do navegador
 */

async function testeIntegracaoDupla() {
    console.log('üî• === TESTE INTEGRA√á√ÉO DUPLA ===');
    console.log('üîÑ PipeRun + ActiveCampaign (com tag)');
    console.log('');

    // 1. Verificar configura√ß√µes
    console.log('üìã 1. Verificando configura√ß√µes...');

    if (window.ACTIVE_CAMPAIGN_CONFIG) {
        console.log('‚úÖ Config ActiveCampaign:', window.ACTIVE_CAMPAIGN_CONFIG.BASE_URL);
        console.log('‚úÖ Tag configurada:', window.ACTIVE_CAMPAIGN_CONFIG.TAG_NAME);
    } else {
        console.log('‚ùå Config ActiveCampaign n√£o encontrada');
    }

    // 2. Verificar formul√°rio
    console.log('');
    console.log('üìã 2. Verificando formul√°rio...');

    const form = document.getElementById('contactForm');
    if (!form) {
        console.log('‚ùå Formul√°rio n√£o encontrado');
        return;
    }

    // Verificar campos obrigat√≥rios
    const nameInput = document.getElementById('name');
    const emailInput = document.getElementById('email');
    const phoneInput = document.getElementById('phone');

    if (nameInput && emailInput && phoneInput) {
        console.log('‚úÖ Campos principais encontrados');
    } else {
        console.log('‚ùå Campos principais n√£o encontrados');
        return;
    }

    // 3. Verificar campos ocultos do ActiveCampaign
    console.log('');
    console.log('üìã 3. Verificando campos ActiveCampaign...');

    const hiddenFields = {
        list: form.querySelector('input[name="u[1]"]'),
        form_id: form.querySelector('input[name="f"]'),
        action: form.querySelector('input[name="act"]'),
        tag: form.querySelector('input[name="p[1]"]')
    };

    Object.entries(hiddenFields).forEach(([key, field]) => {
        if (field) {
            console.log(`‚úÖ Campo ${key}: ${field.value || 'presente'}`);
        } else {
            console.log(`‚ùå Campo ${key}: n√£o encontrado`);
        }
    });

    // 4. Simular preenchimento
    console.log('');
    console.log('üìã 4. Simulando preenchimento...');

    nameInput.value = 'Jo√£o Teste da Silva';
    emailInput.value = 'joao.teste@email.com';
    phoneInput.value = '(11) 99999-9999';

    // Disparar eventos
    nameInput.dispatchEvent(new Event('input', { bubbles: true }));
    emailInput.dispatchEvent(new Event('input', { bubbles: true }));
    phoneInput.dispatchEvent(new Event('input', { bubbles: true }));

    console.log('‚úÖ Campos preenchidos');

    // 5. Verificar UTMs
    console.log('');
    console.log('üìã 5. Verificando UTMs...');

    const urlParams = new URLSearchParams(window.location.search);
    const utms = {
        utm_source: urlParams.get('utm_source') || 'teste',
        utm_medium: urlParams.get('utm_medium') || 'landing',
        utm_campaign: urlParams.get('utm_campaign') || 'formulario',
        utm_content: urlParams.get('utm_content') || '',
        utm_term: urlParams.get('utm_term') || ''
    };

    console.log('üìä UTMs capturadas:', utms);

    // 6. Verificar se FastHomesForm est√° funcionando
    console.log('');
    console.log('üìã 6. Verificando classe FastHomesForm...');

    if (window.fastHomesForm) {
        console.log('‚úÖ FastHomesForm instanciada');

        // Verificar m√©todos essenciais
        const methods = [
            'addHiddenFieldsToForm',
            'sendToActiveCampaign',
            'formSerialize'
        ];

        methods.forEach(method => {
            if (typeof window.fastHomesForm[method] === 'function') {
                console.log(`‚úÖ M√©todo ${method}: dispon√≠vel`);
            } else {
                console.log(`‚ùå M√©todo ${method}: n√£o encontrado`);
            }
        });

    } else {
        console.log('‚ùå FastHomesForm n√£o encontrada');
    }

    // 7. Verificar valida√ß√£o do formul√°rio
    console.log('');
    console.log('üìã 7. Verificando valida√ß√£o...');

    await new Promise(resolve => setTimeout(resolve, 500));

    const submitButton = document.getElementById('submitButton');
    const isDisabled = submitButton ? submitButton.disabled : true;

    if (!isDisabled) {
        console.log('‚úÖ Formul√°rio v√°lido - pronto para envio');
    } else {
        console.log('‚ö†Ô∏è Formul√°rio inv√°lido ou bot√£o desabilitado');
    }

    // 8. Status final
    console.log('');
    console.log('üéØ === STATUS FINAL ===');
    console.log('‚úÖ PipeRun: Configurado');
    console.log('‚úÖ ActiveCampaign: Configurado');
    console.log('‚úÖ Tag: catalogo-fast-homes-solicitado');
    console.log('‚úÖ UTMs: Capturadas automaticamente');
    console.log('');
    console.log('üöÄ PR√ìXIMO PASSO:');
    console.log('1. Clique em "Receber Cat√°logo" para testar envio real');
    console.log('2. Monitore console para logs de envio');
    console.log('3. Verifique se lead aparece no PipeRun e ActiveCampaign');
    console.log('');
    console.log('üí° Para teste com UTMs: ?utm_source=teste&utm_campaign=formulario&utm_medium=landing');

    // Simular adi√ß√£o de campos UTM se FastHomesForm dispon√≠vel
    if (window.fastHomesForm && typeof window.fastHomesForm.addHiddenFieldsToForm === 'function') {
        console.log('');
        console.log('üß™ Simulando adi√ß√£o de campos UTM...');
        try {
            window.fastHomesForm.addHiddenFieldsToForm(utms);
            console.log('‚úÖ Campos UTM adicionados com sucesso');
        } catch (error) {
            console.log('‚ùå Erro ao adicionar campos UTM:', error.message);
        }
    }
}

// Executar ap√≥s carregamento
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', testeIntegracaoDupla);
} else {
    testeIntegracaoDupla();
}
